name: Build and upload artifacts

on: [push, pull_request]

env:
  PD_MAJOR: 0
  PD_MINOR: 56
  PD_BUGFIX: 1
  PDINCLUDEDIR: ./pure-data/src
  PDLIBDIR: ./build
  LIBNAME: witsensor
  LIBSLUG: witsensor

jobs:
  build_linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux]
        arch: [amd64]
        floatsize: [32, 64]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config libbluetooth-dev libdbus-1-dev

      - name: Clone Pd
        run: git clone --branch=${{env.PD_MAJOR}}.${{env.PD_MINOR}}-${{env.PD_BUGFIX}} --depth=1 https://github.com/pure-data/pure-data.git

      - name: Build (make deps && make install)
        run: |
          make deps
          if [ ${{ matrix.floatsize }} -eq 32 ]; then
            make install PDLIBDIR=${{ env.PDLIBDIR }} floatsize=${{ matrix.floatsize }} extension=pd_${{ matrix.os }}
          else
            make install PDLIBDIR=${{ env.PDLIBDIR }} floatsize=${{ matrix.floatsize }} extension=${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.floatsize }}.so
          fi

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.LIBNAME}}-${{ matrix.os }}-${{ matrix.arch }}-pd${{ matrix.floatsize }}
          path: build/${{env.LIBNAME}}

  build_macos:
    runs-on: macos-latest
    strategy:
      matrix:
        os: [darwin]
        arch: [amd64, arm64]
        floatsize: [32, 64]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Clone Pd
        run: git clone --branch=${{env.PD_MAJOR}}.${{env.PD_MINOR}}-${{env.PD_BUGFIX}} --depth=1 https://github.com/pure-data/pure-data.git

      - name: Build (make deps && make install)
        run: |
          ARCH=${{ matrix.arch == 'amd64' && 'x86_64' || matrix.arch }}
          make deps
          if [ ${{ matrix.floatsize }} -eq 32 ]; then
            make install PDLIBDIR=${{ env.PDLIBDIR }} floatsize=${{ matrix.floatsize }} extension=d_${{ matrix.arch }} arch=${ARCH}
          else
            make install PDLIBDIR=${{ env.PDLIBDIR }} floatsize=${{ matrix.floatsize }} extension=darwin-${{ matrix.arch }}-${{ matrix.floatsize }}.so arch=${ARCH}
          fi

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.LIBNAME}}-${{ matrix.os }}-${{ matrix.arch }}-pd${{ matrix.floatsize }}
          path: build/${{env.LIBNAME}}

  # build_windows: (disabled for now)
  #   runs-on: windows-latest
  #   strategy:
  #     matrix:
  #       os: [windows]
  #       arch: [amd64]
  #       floatsize: [64]
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: true
  #     - name: Download Pure-Data Binaries
  #       shell: pwsh
  #       run: |
  #         Invoke-WebRequest -Uri "https://puredata.info/downloads/pure-data/releases/${{env.PD_MAJOR}}.${{env.PD_MINOR}}-${{env.PD_BUGFIX}}-pd64/Pd64-${{env.PD_MAJOR}}.${{env.PD_MINOR}}-${{env.PD_BUGFIX}}.msw.zip" -OutFile "pd64-${{env.PD_MAJOR}}.${{env.PD_MINOR}}-${{env.PD_BUGFIX}}.msw.zip"
  #         Expand-Archive -Path "pd64-${{env.PD_MAJOR}}.${{env.PD_MINOR}}-${{env.PD_BUGFIX}}.msw.zip" -DestinationPath .
  #     - name: Set up MSYS2
  #       uses: msys2/setup-msys2@v2
  #       with:
  #         update: true
  #         install: >-
  #           base-devel
  #           mingw-w64-x86_64-toolchain
  #           mingw-w64-x86_64-cmake
  #     - name: Build (make deps && make install)
  #       shell: msys2 {0}
  #       run: |
  #         export PATH="/mingw64/bin:$PATH"
  #         make deps
  #         make install CC=gcc PDINCLUDEDIR="Pd-${{env.PD_MAJOR}}.${{env.PD_MINOR}}.${{env.PD_BUGFIX}}/src" PDDIR="Pd-${{env.PD_MAJOR}}.${{env.PD_MINOR}}.${{env.PD_BUGFIX}}" PDBINDIR="Pd-${{env.PD_MAJOR}}.${{env.PD_MINOR}}.${{env.PD_BUGFIX}}/bin" PDLIBDIR=${{ env.PDLIBDIR }} floatsize=${{ matrix.floatsize }} extension=${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.floatsize }}.dll
  #     - name: Archive artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{env.LIBNAME}}-${{ matrix.os }}-${{ matrix.arch }}-pd${{ matrix.floatsize }}
  #         path: build/${{env.LIBNAME}}

  package_and_release:
    runs-on: ubuntu-latest
    needs: [build_linux, build_macos]
    permissions:
      contents: write
      actions: read
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Merge Artifacts to Package
        run: |
          mkdir -p ${{env.LIBNAME}}
          cp -rn artifacts/${{env.LIBNAME}}-*/* ${{env.LIBNAME}}

      - name: Upload Package
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.LIBNAME}}-package
          path: ${{env.LIBNAME}}

  deken_check_and_upload:
    runs-on: ubuntu-latest
    needs: [package_and_release]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
        with:
          path: ${{env.LIBNAME}}-src

      - uses: actions/download-artifact@v4
        with:
          name: ${{env.LIBNAME}}-package
          path: ${{env.LIBNAME}}

      - name: Check Deken Package
        shell: bash
        run: |
          SHORT=${GITHUB_REF:11}
          SLUG=${SHORT//\//_}
          echo "## package" | tee -a $GITHUB_STEP_SUMMARY
          mkdir -p package
          docker run --rm --user $(id -u) --volume ./witsensor:/witsensor --volume ./package:/package registry.git.iem.at/pd/deken \
            deken package --output-dir /package --version "${SLUG}" /witsensor
          ls -la package

      - name: Upload Deken Package
        if: ${{ !contains(github.ref, 'test') }}
        shell: bash
        env:
          DEKEN_USERNAME: ${{ secrets.DEKEN_USERNAME }}
          DEKEN_PASSWORD: ${{ secrets.DEKEN_PASSWORD }}
        run: |
          SHORT=${GITHUB_REF:11}
          SLUG=${SHORT//\//_}
          docker run --rm -e DEKEN_USERNAME -e DEKEN_PASSWORD \
            --volume ./witsensor:/witsensor registry.git.iem.at/pd/deken \
            deken upload --name ${{env.LIBNAME}} --version "${SLUG}" --no-source-error /witsensor
